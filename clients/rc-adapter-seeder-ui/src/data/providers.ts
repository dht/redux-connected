import { IProvidersWithInfo } from './../types/types';
import {
    IProviderLocation,
    IProviderSubtype,
    IProviderType,
} from '../types/types';

export const providers: IProvidersWithInfo = [
    {
        id: 'REST',
        location: IProviderLocation.CLIENT,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.NETWORK,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'JSON_SERVER',
        location: IProviderLocation.CLIENT,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.NETWORK,
        implemented: {
            scaffolding: true,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'FS',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'FS_DIRECTORY',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'MONGO_DB',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'SQL_LITE',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'MYSQL',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'POSTGRES',
        location: IProviderLocation.SERVER,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.DB,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'REALTIME_DB',
        location: IProviderLocation.ISO,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.SAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'FIRESTORE',
        location: IProviderLocation.ISO,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.SAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'ATLAS',
        location: IProviderLocation.ISO,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.SAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'HASURA',
        location: IProviderLocation.ISO,
        type: IProviderType.ADAPTER,
        subtype: IProviderSubtype.SAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'JIRA',
        location: IProviderLocation.ISO,
        type: IProviderType.CONNECTOR,
        subtype: IProviderSubtype.SAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {},
    },
    {
        id: 'WHATSAPP',
        location: IProviderLocation.SERVER,
        type: IProviderType.CONNECTOR,
        subtype: IProviderSubtype.LSAAS,
        implemented: {
            scaffolding: false,
            seeding: false,
            getMany: false,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: false,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
        availability: {
            scaffolding: false,
            seeding: false,
            getMany: true,
            getSingle: false,
            updateSingle: false,
            updateMany: false,
            sorting: false,
            pagination: true,
            deletion: false,
            filteringSingleField: false,
            filteringMultiField: false,
        },
    },
];

export const actions = Object.keys(providers[0].implemented);
